// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(nanoid())
  email     String  @unique
  studentId String? @unique
  password  String

  // Email verification
  emailVerified            Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?

  // Password reset
  passwordResetToken   String?
  passwordResetExpires DateTime?

  // Account setup tracking
  setupCompleted   Boolean   @default(false)
  setupCompletedAt DateTime?

  roles      UserRole[]
  membership Membership?

  profile Profile?

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  lastLogin DateTime?
  isActive  Boolean   @default(true)
}

model UserRole {
  id     String   @id @default(nanoid())
  userId String
  role   RoleType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

enum RoleType {
  ADMIN
  MANAGER
  TRAINER
}

model Membership {
  id     String         @id @default(cuid())
  type   MembershipType @default(UNKNOWN)
  expiry DateTime?

  // Relation to User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MembershipType {
  FULL
  ASSOCIATE
  FELLOW
  ALUMNI
  GUEST
  UNKNOWN
}

model Profile {
  id          String       @id @default(cuid())
  name        String
  bio         String?
  avatar      String?
  gradYear    Int?
  course      String?
  socialLinks SocialLinks?

  // Relation to User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialLinks {
  id        String  @id @default(cuid())
  github    String?
  linkedin  String?
  facebook  String?
  discord   String?
  instagram String?

  // Relation to Profile
  profileId String?  @unique // Each SocialLinks entry is associated with one Profile
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
